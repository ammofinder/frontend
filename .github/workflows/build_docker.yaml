---
name: Docker

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions: read-all

jobs:
  check-files:
    name: Smart CI
    runs-on: ubuntu-latest
    outputs:
      skip_job: ${{ steps.check.outputs.skip_job }}
      dryrun: ${{ steps.check.outputs.dryrun }}

    permissions:
      contents: read
      packages: read
      statuses: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check for changed files
      id: changed-files
      uses: tj-actions/changed-files@v45

    - name: Check if only ignored files were changed
      id: check
      run: |
        IFS=' ' read -r -a CHANGED_FILES_ARRAY <<< "${{ steps.changed-files.outputs.all_changed_files }}"
        echo "Changed files: ${CHANGED_FILES_ARRAY[*]}"
        IFS=' ' read -r -a SKIP_FILES_ARRAY <<< "$(tr '\n' ' ' < .github/configs/skip_ci.txt)"
        echo "Skip files list: ${SKIP_FILES_ARRAY[*]}"

        # Initialize variables
        SKIP="true"
        DRYRUN="false"
        NON_MATCHING_FILES=()

        # Check if changed files match any pattern
        for file in "${CHANGED_FILES_ARRAY[@]}"; do
          match_found=false
          for pattern in "${SKIP_FILES_ARRAY[@]}"; do
            # shellcheck disable=SC2053
            if [[ $file == $pattern ]]; then
              match_found=true
              echo "Match found! $file matching $pattern"
              break
            fi
          done

          if [[ $match_found == false ]]; then
            SKIP="false"
            NON_MATCHING_FILES+=("$file")
            echo "File $file does not match any skip pattern and should be tested."
          fi
        done

        # Check conditon for dryrun
        if [[ ${#NON_MATCHING_FILES[@]} -eq 1 && ${NON_MATCHING_FILES[0]} == ".github/workflows/build_docker.yaml" ]]; then
          DRYRUN="true"
        else
          DRYRUN="false"
        fi

        # Results
        echo "Non-matching files: ${NON_MATCHING_FILES[*]}"
        echo "skip_job=${SKIP}" >> "$GITHUB_OUTPUT"
        echo "dryrun=${DRYRUN}" >> "$GITHUB_OUTPUT"

        if [[ $SKIP == "true" ]]; then
          echo "Job will be skipped."
        else
          echo "Job won't be skipped."
          if [[ $DRYRUN == "true" ]]; then
            echo "Dryrun"
          else
            echo "Full run"
          fi
        fi

    - name: Get output values
      run: |
        echo "The dryrun param is ${{ steps.check.outputs.dryrun }}"
        echo "The skip_job param is ${{ steps.check.outputs.skip_job }}"

  build:
    name: Build image
    runs-on: ubuntu-latest
    needs: check-files
    if: ${{ needs.check-files.outputs.skip_job == 'false' }}

    permissions:
      contents: read
      issues: write
      packages: read
      statuses: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set BUILD_TAG
      run: |
        IMAGE="wkobiela/ammofinder_frontend"
        LATEST_TAG="$IMAGE:latest"
        echo "LATEST_TAG=$LATEST_TAG" >> "$GITHUB_ENV"

        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BUILD_TAG="${IMAGE}:PR-${{ github.event.number }}"
          echo "BUILD_TAG=$BUILD_TAG" >> "$GITHUB_ENV"
          echo "BUILD_TAG is $BUILD_TAG"

        elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          SHORT_COMMIT=$(echo "${{ github.sha }}" | cut -c1-7)
          BUILD_TAG="$IMAGE:master-$SHORT_COMMIT"
          echo "BUILD_TAG=$BUILD_TAG" >> "$GITHUB_ENV"
          echo "BUILD_TAG is $BUILD_TAG"
        fi

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Setup mariadb container
      run: |
        docker pull mariadb:latest && \
        docker run --name mariadb --rm -d -p 3306:3306 \
        -e MYSQL_ROOT_PASSWORD=root \
        --health-cmd="healthcheck.sh --connect --innodb_initialized" \
        --health-interval=10s \
        --health-timeout=5s --health-retries=3 \
        mariadb:latest

    - name: Wait until mariadb container is healthy
      uses: raschmitt/wait-for-healthy-container/@master
      with:
        container-name: mariadb
        timeout: 120

    - name: Initialize MariaDB with SQL script
      run: |
        echo "Initialize database -> pushing initialize_db.sql to MariaDB instance."
        docker exec -i mariadb mariadb -uroot -proot < .github/configs/initialize_db.sql
        echo "Show databases ->"
        docker exec mariadb mariadb --table -e "SHOW DATABASES;" -uroot -proot | column -t -s $'\t'
        echo "Describe example_table ->"
        docker exec mariadb mariadb --table -e "USE example_database; DESCRIBE example_table;" -uroot -proot | column -t -s $'\t'
        echo "Show content of example_table ->"
        docker exec mariadb mariadb -e "USE example_database; SELECT * FROM example_table;" -uroot -proot | column -t -s $'\t'
        echo "Get mariadb hostname IP address ->"
        DB_HOST=$(docker exec mariadb hostname -I | awk '{print $1}')
        echo "DB_HOST=$DB_HOST" >> "$GITHUB_ENV"
        echo "DB_HOST=$DB_HOST"

    - name: Build and export to Docker
      uses: docker/build-push-action@v6
      with:
        context: ${{ github.workspace }}
        load: true
        tags: ${{ env.BUILD_TAG }}

    - name: Run Docker container
      run: |
        docker run --name test --rm -d -p 3000:3000 \
        -e DB_HOST=${{ env.DB_HOST }} \
        -e DB_USER=root \
        -e DB_PASSWORD=root \
        -e DB_DATABASE=example_database \
        -e DB_TABLE=example_table \
        -e DB_PORT=3306 \
        ${{ env.BUILD_TAG }}

    - name: Wait until the container is healthy
      uses: raschmitt/wait-for-healthy-container/@master
      with:
        container-name: test
        timeout: 120

    - name: Verify if working
      run: |
        response=$(curl -s http://localhost:3000/status || exit 1)
        echo "Server response: $response"

        main_page_status=$(echo "$response" | jq -r '.["Main page status"]')
        db_status=$(echo "$response" | jq -r '.["Database connection"]')

        if [[ "$main_page_status" != "ACTIVE" || "$db_status" != "ACTIVE" ]]; then
          echo "Error: One or both services are not ACTIVE"
          exit 1
        fi
        echo "Test PASSED"

    - name: Save app preview
      run: |
        HOST_IP=$(hostname -I | awk '{print $1}') && \
        docker pull wkobiela/docker_capture_web:latest && \
        docker run --rm -v "$(pwd)":/tmp/screenshot \
        wkobiela/docker_capture_web:latest \
        "http://$HOST_IP:3000" ammo_front_preview.png \
        -w 2560x1440 \
        --ua "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/131.0.0.0 Safari/537.36"

    - name: Upload image
      id: upload-image-0
      uses: McCzarny/upload-image@v1.4.0
      if: github.event_name == 'pull_request'
      with:
        path: ammo_front_preview.png
        uploadMethod: imgbb
        apiKey: '${{ secrets.IMGBB_API_KEY }}'

    - name: Save artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ammo_front_preview
        path: |
            **/*.png

    - name: Login to Docker Hub
      if: ${{ needs.check-files.outputs.dryrun == 'false' }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Push to Docker Hub
      if: ${{ needs.check-files.outputs.dryrun == 'false' }}
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          docker push ${{ env.BUILD_TAG }}
        elif [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
          docker push ${{ env.BUILD_TAG }} && \
          docker tag ${{ env.BUILD_TAG }} ${{ env.LATEST_TAG }} && \
          docker push ${{ env.LATEST_TAG }}
        fi

    - name: 'Comment PR'
      uses: actions/github-script@v7.0.1
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.COMMENT_GITHUB_TOKEN }}
        script: |
          const fullrun = '${{ needs.check-files.outputs.dryrun }}' === 'false';
          const buildTag = process.env.BUILD_TAG;

          let body = '**CI AUTOMATION** -> App preview screenshot:\n![0](${{steps.upload-image-0.outputs.url}})';

          if (fullrun) {
            body += `\n**To test your image, pull following**: ${buildTag}`;
          }

          github.rest.issues.createComment({ 
            issue_number: context.issue.number,
            owner: context.repo.owner, 
            repo: context.repo.repo, 
            body: body
          })

    - name: Remove container and local image
      if: always()
      run: |
        docker rm --force test
        docker rm --force mariadb
        docker rmi --force ${{ env.BUILD_TAG }}
        docker rmi --force ${{ env.LATEST_TAG }}